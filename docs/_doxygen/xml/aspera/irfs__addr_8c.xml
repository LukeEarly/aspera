<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="irfs__addr_8c" kind="file" language="C++">
    <compoundname>irfs_addr.c</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="irfs_8h" local="no">init/irfs.h</includes>
    <includes refid="multiboot_8h" local="yes">multiboot.h</includes>
    <incdepgraph>
      <node id="5">
        <label>init/irfs.h</label>
        <link refid="irfs_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="1">
        <label>/home/luke/le/aspera/aspera/arch/i386/boot/multiboot/irfs_addr.c</label>
        <link refid="irfs__addr_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>multiboot.h</label>
        <link refid="multiboot_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="irfs__addr_8c_1a243de17eddf6c35e08af6d22c4bdeb2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structirfs__mem" kindref="compound">irfs_mem</ref></type>
        <definition>struct irfs_mem irfs_addr</definition>
        <argsstring>()</argsstring>
        <name>irfs_addr</name>
        <briefdescription>
<para>Loads and gets address of irfs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>memory chunk. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/luke/le/aspera/aspera/arch/i386/boot/multiboot/irfs_addr.c" line="1" column="0" bodyfile="/home/luke/le/aspera/aspera/arch/i386/boot/multiboot/irfs_addr.c" bodystart="7" bodyend="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;init/irfs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;multiboot.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structirfs__mem" kindref="compound">irfs_mem</ref><sp/>irfs_addr()<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>*(uint32_t<sp/>*)<sp/>multiboot_info;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(flags<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>3));</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>*(uint32_t<sp/>*)<sp/>(multiboot_info<sp/>+<sp/>20);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*modarr<sp/>=<sp/>(uint32_t<sp/>*)<sp/>(*(uint32_t<sp/>*)<sp/>(multiboot_info<sp/>+<sp/>24));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*modstruct<sp/>=<sp/>modarr<sp/>+<sp/>16*i;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structirfs__mem_1ac7500702a991a65d6835ca0e6a0e30f6" kindref="member">start</ref><sp/>=<sp/>modstruct[0];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>end<sp/>=<sp/>modstruct[1];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structirfs__mem" kindref="compound">irfs_mem</ref><sp/>mem<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structirfs__mem" kindref="compound">irfs_mem</ref>)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structirfs__mem_1ac7500702a991a65d6835ca0e6a0e30f6" kindref="member">start</ref><sp/>=<sp/>(uint32_t<sp/>*)<sp/><ref refid="structirfs__mem_1ac7500702a991a65d6835ca0e6a0e30f6" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structirfs__mem_1a579e55e3c819e91c74b5407746775551" kindref="member">length</ref><sp/>=<sp/>(uintptr_t)<sp/>(end<sp/>-<sp/><ref refid="structirfs__mem_1ac7500702a991a65d6835ca0e6a0e30f6" kindref="member">start</ref>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem.<ref refid="structirfs__mem_1a579e55e3c819e91c74b5407746775551" kindref="member">length</ref><sp/>&gt;<sp/>12<sp/>&amp;&amp;<sp/>irfs_check_magic(mem))<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/luke/le/aspera/aspera/arch/i386/boot/multiboot/irfs_addr.c"/>
  </compounddef>
</doxygen>
